service: legion

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 3 # how long Slack will wait for an initial response
  region: us-east-1
  versionFunctions: false # temp work around for provisionedConcurrency
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "datapipeline:ListPipelines"
        - "lambda:InvokeFunction"
      Resource: "*"
  vpc: # vpc-70658509 | EQ-DC-Tunnel
    securityGroupIds:
      - sg-081b437d # api-gateway-dc
    subnetIds:
      - subnet-b59ae9fe # EQ-DC-Lambda Public 1A
      - subnet-df12bb82 # EQ-DC-Lambda Public 1B
  # TODO: move these to specific functions below once re-arch is done
  environment:
    DEPLOYED: true
    STAGE: ${sls:stage}
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    GITHUB_TOKEN: ${env:GITHUB_TOKEN}
    NETLIFY_TOKEN: ${env:NETLIFY_TOKEN}
    YELP_API_KEY: ${env:YELP_API_KEY}
    SLACK_OAUTH: ${env:SLACK_OAUTH}
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
    GOOGLE_SECRET_KEY: ${env:GOOGLE_SECRET_KEY}
    GOOGLE_REFRESH_TOKEN: ${env:GOOGLE_REFRESH_TOKEN}
    GOOGLE_DEMO_CALENDAR: ${env:GOOGLE_DEMO_CALENDAR}
    VERCEL_TEAM: ${env:VERCEL_TEAM}
    VERCEL_TOKEN: ${env:VERCEL_TOKEN}
    DETA_KEY: ${env:DETA_KEY}

plugins:
  - serverless-offline
  - serverless-domain-manager

functions:
  receiver:
    handler: app.handler
    provisionedConcurrency: 1 # keep this hot for immediate slack response
    memorySize: 256 # no need for a more powerful instance for the receiver
    events:
      - http:
          path: slack/events
          method: post

  slack-worker:
    handler: worker.handler
    timeout: 900 # allow for long-running tasks

custom:
  customDomain:
    domainName: legion.eqworks.io
    basePath: ${sls:stage}
    stage: ${sls:stage}
    certificateName: '*.eqworks.io'
    createRoute53Record: true
