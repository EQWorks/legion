service: legion

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 30
  region: us-east-1
  memorySize: 256
  versionFunctions: false # temp work around for provisionedConcurrency
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "datapipeline:ListPipelines"
        - "lambda:InvokeFunction"
      Resource: "*"
  vpc: # vpc-70658509 | EQ-DC-Tunnel
    securityGroupIds:
      - sg-081b437d # api-gateway-dc
    subnetIds:
      - subnet-b59ae9fe # EQ-DC-Lambda Public 1A
      - subnet-df12bb82 # EQ-DC-Lambda Public 1B
  # TODO: move these to specific functions below once re-arch is done
  environment:
    DEPLOYED: true
    STAGE: ${opt:stage, self:provider.stage}
    SLACK_SIGNING_SECRET: ${env:SLACK_SIGNING_SECRET}
    GITHUB_TOKEN: ${env:GITHUB_TOKEN}
    NETLIFY_TOKEN: ${env:NETLIFY_TOKEN}
    YELP_API_KEY: ${env:YELP_API_KEY}
    ASANA_TOKEN: ${env:ASANA_TOKEN}

functions:
  # Express.js based entry points API server
  entry:
    handler: app.handler
    # keep this hot for immediate slack response
    provisionedConcurrency: 1
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: '{proxy+}'
          method: ANY
          cors: true
  # specific workers below
  # TODO: generic worker setup, so [name]: handler: worker[name]
  # Object.keys(modules).forEach(uri => `${uri}: handler: worker.${uri}`)
  # slack function with a { type, payload }
  slack:
    handler: slack-worker
  food:
    handler: worker.food
  diff:
    handler: worker.diff
  pipeline:
    handler: worker.pipeline
  avail:
    handler: worker.avail
  vacay:
    handler: worker.vacay
